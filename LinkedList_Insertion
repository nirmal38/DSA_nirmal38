#include<bits/stdc++.h>
using namespace std;
struct Node{
  int data;
  struct Node *next;
};

void Traversal(struct Node* ptr){
  while(ptr != NULL){
  cout<<"element:"<<ptr->data<<endl;
  ptr = ptr->next;
  }
}

// ...............Case 1................

// struct Node* insertAtFirst(struct Node* head,int data){
//   struct Node* ptr = (struct Node*) malloc(sizeof(struct Node*));
//   ptr->next = head;
//   ptr->data = data;
//   return ptr;
// }

// ...............Case 2.................

// struct Node* insertAtIndex(struct Node* head,int data,int index){
//   struct Node* ptr = (struct Node*) malloc(sizeof(struct Node*));
//   struct Node* p = head;
//   int i=0;
//   while(i !=index-1){
//     p = p->next;
//     i++;
//   }
//   ptr ->data = data;
//   ptr->next = p->next;
//   p->next = ptr;
//   return head;
// }

//  ............Case 3................

// struct Node* insertAtLast(struct Node* head,int data){
//   struct Node* ptr = (struct Node*) malloc(sizeof(struct Node*));
//   ptr->data=data;
//   struct Node* p =head;
//   while(p->next != NULL){
//   p =p->next;
//   }
//   p->next = ptr;
//   ptr->next =NULL;
//   return head;
// }

// .............Case 4...............

struct Node* insertAfterNode(struct Node* head,struct Node* prevNode,int data){
  struct Node* ptr = (struct Node*) malloc(sizeof(struct Node*));
 ptr->data= data;
 ptr->next = prevNode->next;
 prevNode->next = ptr;
 return head;

}

  int main()
{
  struct Node *head;
  struct Node *second;
  struct Node *third;

  // allocate memory in Heap
  head = (struct Node*) malloc(sizeof(struct Node));
  second = (struct Node*) malloc(sizeof(struct Node));
  third = (struct Node*) malloc(sizeof(struct Node));
//Link first and second node
head->data=7;
head->next=second;

//Link second and third node
second->data=10;
second->next=third;

//Link third and NULL node
third->data=13;
third->next=NULL;

// Traversal(head);
//  head = insertAtFirst(head,5);
// head = insertAtIndex(head,8,1);
// head = insertAtLast(head,15);
 head =insertAfterNode(head,third,14);
 Traversal(head);

  return 0;
}
